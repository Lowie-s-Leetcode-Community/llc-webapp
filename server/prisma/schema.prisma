generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  discordId          String              @unique
  leetcodeUsername   String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  mostRecentSubId    Int
  userDailyObjects   UserDailyObject[]
  userMonthlyObjects UserMonthlyObject[]
  userSolvedProblems UserSolvedProblem[]
  userDiscordQuiz    UserDiscordQuiz[]
}

model Problem {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  title              String
  titleSlug          String
  difficulty         String
  isPremium          Boolean
  dailyObjects       DailyObject[]
  userSolvedProblems UserSolvedProblem[]
  missions           Mission[]           @relation("MissionToProblem")
  topics             Topic[]             @relation("ProblemToTopic")
}

model UserSolvedProblem {
  id           Int      @id @default(autoincrement())
  submissionId Int
  problemId    Int
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  problem      Problem  @relation(fields: [problemId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, problemId], name: "submissionPairing")
}

model Topic {
  id        Int       @id @default(autoincrement())
  topicName String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  problems  Problem[] @relation("ProblemToTopic")
}

model DailyObject {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  problemId        Int
  generatedDate    DateTime          @unique @db.Date
  problem          Problem           @relation(fields: [problemId], references: [id])
  userDailyObjects UserDailyObject[]
}

model UserDailyObject {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        Int
  dailyObjectId Int
  solvedDaily   Int         @default(0)
  solvedEasy    Int         @default(0)
  solvedMedium  Int         @default(0)
  solvedHard    Int         @default(0)
  scoreEarned   Int         @default(0)
  scoreGacha    Int         @default(-1)
  dailyObject   DailyObject @relation(fields: [dailyObjectId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, dailyObjectId], name: "userDailyObjectPairing")
}

model UserMonthlyObject {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  scoreEarned     Int
  firstDayOfMonth DateTime @db.Date
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, firstDayOfMonth], name: "userMonthlyObjectPairing")
}

model Mission {
  id             Int       @id @default(autoincrement())
  name           String
  description    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isHidden       Boolean
  rewardImageURL String?
  problems       Problem[] @relation("MissionToProblem")
}

model DiscordQuiz {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  category            String
  question            String
  difficulty          String
  correctAnswerId     Int
  discordQuizAnswer   DiscordQuizAnswer[]
  userDiscordQuizzes  UserDiscordQuiz[]
  hint                String              @default("")
  answerExplanation   String              @default("")
}

model DiscordQuizAnswer {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  answer        String
  discordQuizId Int
  discordQuiz   DiscordQuiz @relation(fields: [discordQuizId], references: [id])
}

model UserDiscordQuiz {
  id                 Int         @id @default(autoincrement())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  encountersTimes    Int         @default(0)
  correctTimes       Int         @default(0)
  userId             Int
  user               User        @relation(fields: [userId], references: [id])
  discordQuizId      Int
  discordQuiz        DiscordQuiz @relation(fields: [discordQuizId], references: [id])
}

model SystemConfiguration {
  id                        Int    @id @default(autoincrement())
  serverId                  String
  verifiedRoleId            String
  unverifiedRoleId          String
  contestRoleId             String @default("") // set equal to verified
  timeBeforeKick            Int    @default(604800)
  dailySolveScore           Int    @default(2)
  easySolveScore            Int    @default(1)
  mediumSolveScore          Int    @default(2)
  hardSolveScore            Int    @default(3)
  practiceScoreCap          Int    @default(6)
  streakBonus               Int    @default(4)
  submissionChannelId       String
  scoreLogChannelId         String
  dailyThreadChannelId      String
  dailyDiscussionChannelId  String @default("") // set to discussion-channel
  contestAlertId            String @default("") // set to general
  devErrorLogId             String
  databaseLogId             String
  backupChannelId           String
  eventLoggingId            String
}

model ContestConfiguration {
  id                      Int    @id @default(autoincrement())
  weeklyContestId         Int
  biweeklyContestId       Int
}

model Account {
  id                   Int      @id @default(autoincrement())
  email             String
  password          String
  role              String
}
